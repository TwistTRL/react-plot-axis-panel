{"version":3,"sources":["lib/PrimaryCategoryObject.js","lib/SecondaryCategoryObject.js","lib/CollapsibleYPanel.js","lib/LinearSpaceYPanel.js","index.js"],"names":["PrimaryCategoryObject","_ref","_this","this","name","backgroundColor","Object","classCallCheck","_getBitmap","memoize_one","text","_name","font","canvas","document","createElement","ctx","getContext","height","measureText","width","fillStyle","strokeStyle","textAlign","textBaseline","rotate","Math","PI","_getRotatedAxisCoordi","getRotatedAxisCoordinate","x","y","fillText","strokeText","_backgroundColor","startDomX","endDomX","bitmap","start","round","plotHeight","srcx","plotWidth","srcy","fillRect","drawImage","error","SecondaryCategoryObject","color","bgColor","OFFSETX","SECONDARY_COLOR_CYCLE","CollapsibleYPanel","props","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","_this$props","react_default","a","style","display","draw","_this$props2","categoryStructure","useLeaves","rowHeight","draw_memo","memo","categoryStructureClone","i","length","p","newP","children","j","s","newS","push","useLeavesSet","Set","current","clearRect","rowNum","rowStart","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","has","getName","setBackgroundColor","err","return","PureComponent","LinearSpaceYPanel","minY","maxY","end","objectSpread","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","toDomYCoord_Linear","console","log","getRandomElements","array","ret","elem","random","CollapsibleYPanelBundle","leaves","map","flat","_ref2","state","_this2","_this$state","Fragment","JSON","stringify","onClick","setState","type","min","max","onChange","ev","Number","parseInt","target","lib_CollapsibleYPanel","Component","LinearSpaceYPanelBundle","_this3","_this4","_this$state2","lib_LinearSpaceYPanel","App","react_router_dom","className","to","react_router","path","exact","component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.78aa8ff2.chunk.js","sourcesContent":["import {memoize_one} from \"memoize\";\nimport {getRotatedAxisCoordinate} from \"plot-utils\";\n\nconst WIDTH = 40;\n\nclass PrimaryCategoryObject {\n  /*\n   * Primary category objects are initialized with name, backgroundColor.\n   * They should remain unchanged over their life time.\n   */\n  constructor({name,backgroundColor}) {\n    this._name = name;\n    this._backgroundColor = backgroundColor;\n  }\n\n  _getBitmap = memoize_one(()=>{\n    let text = this._name;\n    let font = \"bold 18px Sans\";\n    let fillStyle = \"white\";\n    let strokeStyle = \"#878787\";\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    ctx.font = font;\n    let width = 18;\n    let height = ctx.measureText(text).width;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.font = font;\n    ctx.fillStyle = fillStyle;\n    ctx.strokeStyle = strokeStyle;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.rotate(-Math.PI/2);\n    let {x,y} = getRotatedAxisCoordinate(width/2,height/2,-Math.PI/2);\n    ctx.fillText(text,x,y);\n    ctx.strokeText(text,x,y);\n    return canvas;\n  });\n  \n  draw(ctx,width,height,startDomX,endDomX) {\n    let bitmap = this._getBitmap();\n    let start = Math.round(startDomX);\n    let end = Math.round(endDomX);\n    let plotWidth = WIDTH;\n    let plotHeight = end-start;\n    let srcx = Math.round(bitmap.width/2-plotWidth/2);\n    let srcy = Math.round(bitmap.height/2-plotHeight/2);\n    ctx.fillStyle = this._backgroundColor;\n    ctx.fillRect( 0,start,\n                  plotWidth,plotHeight);\n    try {\n      ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                    0,start,plotWidth,plotHeight);\n    } catch(error) {\n      // Mose likely, when string is empty, drawing a empty bitmap will cause InvalidStateError \n    }\n  }\n}\n\nexport default PrimaryCategoryObject;\n","import {memoize_one} from \"memoize\";\n\nconst OFFSETX = 40;\n\nclass SecondaryCategoryObject {\n  /*\n   * Secondary category objects are initialized with name.\n   * They should remain unchanged over their life time.\n   * The backgroundColor may change, hence, the bg color can/need to be supplied before drawing.\n   */\n  constructor({name,backgroundColor}) {\n    this._name = name;\n    this._backgroundColor = backgroundColor;\n  }\n\n  getName(){\n    return this._name;\n  }\n\n  setBackgroundColor(color){\n    this._backgroundColor = color; \n  }\n\n  _getBitmap = memoize_one(()=>{\n    let text = this._name;\n    let font = \"bold 12px Sans\";\n    let fillStyle = \"black\";\n    let canvas =  document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    ctx.font = font;\n    let width = ctx.measureText(text).width;\n    let height = 14;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.font = font;\n    ctx.fillStyle = fillStyle;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(text,width/2,height/2);\n    return canvas;\n  });\n  \n  draw(ctx,width,height,startDomX,endDomX) {\n    let bitmap = this._getBitmap();\n    let bgColor = this._backgroundColor;\n    let start = Math.round(startDomX);\n    let end = Math.round(endDomX);\n    let plotHeight = end-start;\n    let plotWidth = width - OFFSETX;\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(OFFSETX,start,plotWidth,plotHeight);\n    let srcx = 0;\n    let srcy = Math.round(bitmap.height/2-plotHeight/2);\n    ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                  OFFSETX+5,start,plotWidth,plotHeight);\n  }\n}\n\nexport default SecondaryCategoryObject;\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\nimport PrimaryCategoryObject from \"./PrimaryCategoryObject\";\nimport SecondaryCategoryObject from \"./SecondaryCategoryObject\";\n\nconst SECONDARY_COLOR_CYCLE = [\"#feefce\",\"#fffbe7\"];\n\nclass CollapsibleYPanel extends PureComponent{\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n  }\n  render(){\n    let { width, height,\n          } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} style={{width:width,height:height,display:\"block\"}}></canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n\n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw(){\n    let { categoryStructure, /* [{name,backgroundColor,children:[{name}]}] */\n          useLeaves,\n          rowHeight, width, height,\n          } = this.props;\n    this.draw_memo = this.draw_memo ||{};\n    let memo = this.draw_memo;\n    // Cache categoryStructure change\n    if (memo.categoryStructure!==categoryStructure) {\n      memo.categoryStructure = categoryStructure;\n      memo.categoryStructureClone = [];\n      for (let i=0; i<categoryStructure.length; i++){\n        let p = categoryStructure[i];\n        let newP = new PrimaryCategoryObject(p);\n        newP.children = [];\n        for (let j=0; j<p.children.length; j++) {\n          let s = p.children[j];\n          let newS = new SecondaryCategoryObject(s);\n          newP.children.push(newS);\n        }\n        memo.categoryStructureClone.push(newP);\n      }\n    }\n    // Cache useLeaves change\n    if (memo.useLeaves!==useLeaves) {\n      memo.useLeaves = useLeaves;\n      memo.useLeavesSet = new Set(useLeaves);\n    }\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    for (let i=0,rowNum=0; i<memo.categoryStructureClone.length; i++) {\n      let p = memo.categoryStructureClone[i];\n      let rowStart = rowNum;\n      for (let s of p.children) {\n        if (memo.useLeavesSet.has(s.getName())) {\n          s.setBackgroundColor(SECONDARY_COLOR_CYCLE[rowNum%SECONDARY_COLOR_CYCLE.length]);\n          s.draw(ctx,width,height,rowNum*rowHeight,(rowNum+1)*rowHeight);\n          rowNum+=1;\n        }\n      }\n      if (rowNum !== rowStart) {\n        p.draw(ctx,width,height,rowStart*rowHeight,rowNum*rowHeight);\n      }\n    }\n  }\n}\n\nCollapsibleYPanel.propTypes = {\n  categoryStructure: PropTypes.array.isRequired,\n  useLeaves: PropTypes.array.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n}\n\nexport default CollapsibleYPanel;\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\nimport {toDomYCoord_Linear} from \"plot-utils\"; \nimport PrimaryCategoryObject from \"./PrimaryCategoryObject\";\nimport SecondaryCategoryObject from \"./SecondaryCategoryObject\";\n\nconst SECONDARY_COLOR_CYCLE = [\"#feefce\",\"#fffbe7\"];\n\nclass LinearSpaceYPanel extends PureComponent{\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n  }\n  render(){\n    let { width, height,\n          } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} style={{width:width,height:height,display:\"block\"}}></canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n\n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw(){\n    let { categoryStructure, /* [{name,color,start,end,children:[{name,start,end}]}] */\n          minY, maxY,\n          width, height,\n          } = this.props;\n    this.draw_memo = this.draw_memo ||{};\n    let memo = this.draw_memo;\n    // Cache categoryStructure change\n    if (memo.categoryStructure!==categoryStructure) {\n      memo.categoryStructure = categoryStructure;\n      memo.categoryStructureClone = [];\n      for (let i=0,rowNum=0; i<categoryStructure.length; i++){\n        let p = categoryStructure[i];\n        let newP = new PrimaryCategoryObject(p);\n        newP.start = p.start;\n        newP.end = p.end;\n        newP.children = [];\n        for (let j=0; j<p.children.length; j++) {\n          let s = p.children[j];\n          let newS = new SecondaryCategoryObject({...s,backgroundColor:SECONDARY_COLOR_CYCLE[rowNum%SECONDARY_COLOR_CYCLE.length]});\n          newS.start = s.start;\n          newS.end = s.end;\n          newP.children.push(newS);\n          rowNum+=1;\n        }\n        memo.categoryStructureClone.push(newP);\n      }\n    }\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    let rowNum = 0;\n    for (let p of memo.categoryStructureClone) {\n      for (let s of p.children) {\n        if (s.end<minY || s.start>maxY) {\n          continue;\n        }\n        else {\n          let startDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,s.end) );\n          let endDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,s.start) );\n          s.draw(ctx,width,height,startDomX,endDomX);\n          rowNum+=1;\n        }\n      }\n      //\n      if (p.end<minY || p.start>maxY) {\n        continue;\n      }\n      else {\n        let startDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,p.end) );\n        let endDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,p.start) );\n        console.log(minY,maxY,p.end,startDomX);\n        p.draw(ctx,width,height,startDomX,endDomX);\n      }\n    }\n  }\n}\n\nLinearSpaceYPanel.propTypes = {\n  categoryStructure: PropTypes.array.isRequired,\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n}\n\nexport default LinearSpaceYPanel;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter as Router, Link, Route} from \"react-router-dom\";\n\nimport {LinearSpaceYPanel,CollapsibleYPanel} from \"./lib\";\n\n// CSS\nimport \"./index.css\";\n\nfunction getRandomElements(array){\n  let ret = [];\n  for (let elem of array){\n    if (Math.random()<0.5) {\n      ret.push(elem);\n    }\n  }\n  return ret;\n}\n\nclass CollapsibleYPanelBundle extends Component{\n  constructor(props){\n    super(props);\n    this.categoryStructure = [{ name:'a',backgroundColor:\"#efdb96\",\n                                children:[{name:'a1'},\n                                          {name:'a2'}]\n                                },\n                              { name:'b',backgroundColor:\"#cface3\",\n                                children:[{name:'b1'},\n                                          {name:'b2'}]\n                                }\n                              ];\n    this.leaves = this.categoryStructure.map( ({children})=>children )\n                                        .flat()\n                                        .map( ({name})=>name );\n    this.state ={ useLeaves: this.leaves,\n                  rowHeight: 40,\n                  width: 150,\n                  height: 40,\n                  };\n  }\n\n  render(){\n    let {useLeaves,rowHeight,width,height} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            cateogoryStructure\n            <pre>\n              {JSON.stringify(this.categoryStructure,null,' ')}\n            </pre>\n          </div>\n          <div>\n            useLeaves\n            <button onClick={()=>this.setState({useLeaves:getRandomElements(this.leaves)})}>randomize</button>\n            {JSON.stringify(useLeaves,null,' ')}\n          </div>\n          <div>\n            rowHeight\n            <input  type=\"range\" min={10} max={50} value={rowHeight}\n                    onChange={(ev)=>this.setState({rowHeight:Number.parseInt(ev.target.value)})}\n                    />\n            {rowHeight}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={50} max={200} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={0} max={500} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <CollapsibleYPanel  categoryStructure={this.categoryStructure}\n                              useLeaves={useLeaves}\n                              rowHeight={rowHeight}\n                              width={width}\n                              height={height}\n                              />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass LinearSpaceYPanelBundle extends Component {\n  constructor(props){\n    super(props);\n    this.categoryStructure = [{ name:'',\n                                backgroundColor:\"#a8e6e3\",\n                                start:0,\n                                end:15,\n                                children:[{ name:'a1',\n                                            start:0,\n                                            end:5},\n                                          { name:'a2',\n                                            start:5,\n                                            end:15}]\n                                },\n                              { name:'',\n                                backgroundColor:\"#fb8730\",\n                                start:15,\n                                end:80,\n                                children:[{ name:'b1',\n                                            start:15,\n                                            end:35},\n                                          { name:'b2',\n                                            start:35,\n                                            end:80}]\n                                }\n                              ];\n    this.state ={ minY: 0,\n                  maxY: 100,\n                  width: 150,\n                  height: 40,\n                  };\n  }\n\n  render(){\n    let {minY,maxY,width,height} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            cateogoryStructure\n            <pre>\n              {JSON.stringify(this.categoryStructure,null,' ')}\n            </pre>\n          </div>\n          <div>\n            minY\n            <input  type=\"range\" min={0} max={maxY} value={minY}\n                    onChange={(ev)=>this.setState({minY:Number.parseInt(ev.target.value)})}\n                    />\n            {minY}\n          </div>\n          <div>\n            maxY\n            <input  type=\"range\" min={minY} max={120} value={maxY}\n                    onChange={(ev)=>this.setState({maxY:Number.parseInt(ev.target.value)})}\n                    />\n            {maxY}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={50} max={200} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={0} max={500} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <LinearSpaceYPanel  categoryStructure={this.categoryStructure}\n                              minY={minY}\n                              maxY={maxY}\n                              width={width}\n                              height={height}\n                              />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass App extends Component{\n  render(){\n    return (\n      <Router>\n        <nav className=\"app\">\n          <Link to=\"/CollapsibleYPanel\">CollapsibleYPanel</Link>\n          <Link to=\"/LinearSpaceYPanel\">LinearSpaceYPanel</Link>\n        </nav>\n        <Route path=\"/CollapsibleYPanel\" exact component={CollapsibleYPanelBundle}/>\n        <Route path=\"/LinearSpaceYPanel\" exact component={LinearSpaceYPanelBundle}/>\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}