{"version":3,"sources":["lib/PrimaryCategoryObject.js","lib/SecondaryCategoryObject.js","lib/CollapsibleYPanel.js","lib/LinearSpaceYPanel.js","index.js"],"names":["PrimaryCategoryObject","_ref","_this","this","name","backgroundColor","from","to","Object","classCallCheck","_getBitmap","memoize_one","text","_name","font","canvas","document","createElement","ctx","getContext","height","measureText","width","fillStyle","strokeStyle","textAlign","textBaseline","rotate","Math","PI","_getRotatedAxisCoordi","getRotatedAxisCoordinate","x","y","fillText","strokeText","_backgroundColor","startDomX","endDomX","bitmap","start","round","plotHeight","srcx","plotWidth","srcy","fillRect","drawImage","SecondaryCategoryObject","bgColor","OFFSETX","PRIMARY_COLOR_CYCLE","SECONDARY_COLOR_CYCLE","CollapsibleYPanel","props","possibleConstructorReturn","getPrototypeOf","call","ref","React","createRef","_this$props","react_default","a","style","display","draw","_this$props2","categoryStructure","useLeaves","rowHeight","draw_memo","memo","categoryStructureClone","i","length","p","newP","objectSpread","children","j","s","newS","push","useLeavesSet","Set","current","clearRect","rowNum","rowStart","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","has","getName","err","return","PureComponent","LinearSpaceYPanel","minY","maxY","end","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","toDomYCoord_Linear","console","log","getRandomElements","array","ret","elem","random","CollapsibleYPanelBundle","leaves","map","flat","_ref2","state","_this2","_this$state","Fragment","JSON","stringify","onClick","setState","type","min","max","onChange","ev","Number","parseInt","target","lib_CollapsibleYPanel","Component","LinearSpaceYPanelBundle","_this3","_this4","_this$state2","lib_LinearSpaceYPanel","App","react_router_dom","className","react_router","path","exact","component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.25e48cd0.chunk.js","sourcesContent":["import {memoize_one} from \"memoize\";\nimport {getRotatedAxisCoordinate} from \"plot-utils\";\n\nconst WIDTH = 40;\n\nclass PrimaryCategoryObject {\n  constructor({name,from,to,backgroundColor}) {\n    this._name = name;\n    this._backgroundColor = backgroundColor;\n  }\n\n  _getBitmap = memoize_one(()=>{\n    let text = this._name;\n    let font = \"bold 18px Sans\";\n    let fillStyle = \"white\";\n    let strokeStyle = \"#878787\";\n    let canvas = document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    ctx.font = font;\n    let width = 18;\n    let height = ctx.measureText(text).width;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.font = font;\n    ctx.fillStyle = fillStyle;\n    ctx.strokeStyle = strokeStyle;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.rotate(-Math.PI/2);\n    let {x,y} = getRotatedAxisCoordinate(width/2,height/2,-Math.PI/2);\n    ctx.fillText(text,x,y);\n    ctx.strokeText(text,x,y);\n    return canvas;\n  });\n  \n  draw(ctx,width,height,startDomX,endDomX) {\n    let bitmap = this._getBitmap();\n    let start = Math.round(startDomX);\n    let end = Math.round(endDomX);\n    let plotWidth = WIDTH;\n    let plotHeight = end-start;\n    let srcx = Math.round(bitmap.width/2-plotWidth/2);\n    let srcy = Math.round(bitmap.height/2-plotHeight/2);\n    ctx.fillStyle = this._backgroundColor;\n    ctx.fillRect( 0,start,\n                  plotWidth,plotHeight);\n    ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                  0,start,plotWidth,plotHeight);\n  }\n}\n\nexport default PrimaryCategoryObject;\n","import {memoize_one} from \"memoize\";\n\nconst OFFSETX = 40;\n\nclass SecondaryCategoryObject {\n  constructor({name,from,to,backgroundColor}) {\n    this._name = name;\n    this._backgroundColor = backgroundColor;\n  }\n\n  getName(){\n    return this._name;\n  }\n  \n  _getBitmap = memoize_one(()=>{\n    let text = this._name;\n    let font = \"bold 12px Sans\";\n    let fillStyle = \"black\";\n    let canvas =  document.createElement(\"canvas\");\n    let ctx = canvas.getContext(\"2d\");\n    ctx.font = font;\n    let width = ctx.measureText(text).width;\n    let height = 14;\n    canvas.width = width;\n    canvas.height = height;\n    ctx.font = font;\n    ctx.fillStyle = fillStyle;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillText(text,width/2,height/2);\n    return canvas;\n  });\n  \n  draw(ctx,width,height,startDomX,endDomX) {\n    let bitmap = this._getBitmap();\n    let bgColor = this._backgroundColor;\n    let start = Math.round(startDomX);\n    let end = Math.round(endDomX);\n    let plotHeight = end-start;\n    let plotWidth = width - OFFSETX;\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(OFFSETX,start,plotWidth,plotHeight);\n    let srcx = 0;\n    let srcy = Math.round(bitmap.height/2-plotHeight/2);\n    ctx.drawImage(bitmap,srcx,srcy,plotWidth,plotHeight,\n                  OFFSETX+5,start,plotWidth,plotHeight);\n  }\n}\n\nexport default SecondaryCategoryObject;\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\nimport PrimaryCategoryObject from \"./PrimaryCategoryObject\";\nimport SecondaryCategoryObject from \"./SecondaryCategoryObject\";\n\nconst PRIMARY_COLOR_CYCLE = [\"#d2b4de\",\"#aed6f1\",\"#a9dfbf\",\"#f9e79f\",\"#f5cba7\"];\nconst SECONDARY_COLOR_CYCLE = [\"#feefce\",\"#fffbe7\"];\n\nclass CollapsibleYPanel extends PureComponent{\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n  }\n  render(){\n    let { width, height,\n          } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} style={{width:width,height:height,display:\"block\"}}></canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n\n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw(){\n    let { categoryStructure, /* [{name,children:[...]}] */\n          useLeaves,\n          rowHeight, width, height,\n          } = this.props;\n    this.draw_memo = this.draw_memo ||{};\n    let memo = this.draw_memo;\n    // Cache categoryStructure change\n    if (memo.categoryStructure!==categoryStructure) {\n      memo.categoryStructure = categoryStructure;\n      memo.categoryStructureClone = [];\n      for (let i=0; i<categoryStructure.length; i++){\n        let p = categoryStructure[i];\n        let newP = new PrimaryCategoryObject({...p,backgroundColor:PRIMARY_COLOR_CYCLE[i%PRIMARY_COLOR_CYCLE.length]});\n        newP.children = [];\n        for (let j=0; j<p.children.length; j++) {\n          let s = p.children[j];\n          let newS = new SecondaryCategoryObject({...s,backgroundColor:SECONDARY_COLOR_CYCLE[j%SECONDARY_COLOR_CYCLE.length]});\n          newP.children.push(newS);\n        }\n        memo.categoryStructureClone.push(newP);\n      }\n    }\n    // Cache useLeaves change\n    if (memo.useLeaves!==useLeaves) {\n      memo.useLeaves = useLeaves;\n      memo.useLeavesSet = new Set(useLeaves);\n    }\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    for (let i=0,rowNum=0; i<memo.categoryStructureClone.length; i++) {\n      let p = memo.categoryStructureClone[i];\n      let rowStart = rowNum;\n      for (let s of p.children) {\n        if (memo.useLeavesSet.has(s.getName())) {\n          s.draw(ctx,width,height,rowNum*rowHeight,(rowNum+1)*rowHeight);\n          rowNum+=1;\n        }\n      }\n      if (rowNum !== rowStart) {\n        p.draw(ctx,width,height,rowStart*rowHeight,rowNum*rowHeight);\n      }\n    }\n  }\n}\n\nCollapsibleYPanel.propTypes = {\n  categoryStructure: PropTypes.array.isRequired,\n  useLeaves: PropTypes.array.isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n}\n\nexport default CollapsibleYPanel;\n","import React, { PureComponent } from 'react';\nimport PropTypes from \"prop-types\";\nimport {toDomYCoord_Linear} from \"plot-utils\"; \nimport PrimaryCategoryObject from \"./PrimaryCategoryObject\";\nimport SecondaryCategoryObject from \"./SecondaryCategoryObject\";\n\nconst PRIMARY_COLOR_CYCLE = [\"#d2b4de\",\"#aed6f1\",\"#a9dfbf\",\"#f9e79f\",\"#f5cba7\"];\nconst SECONDARY_COLOR_CYCLE = [\"#feefce\",\"#fffbe7\"];\n\nclass LinearSpaceYPanel extends PureComponent{\n  constructor(props){\n    super(props);\n    this.ref = React.createRef();\n  }\n  render(){\n    let { width, height,\n          } = this.props;\n    return (\n      <canvas ref={this.ref} width={width} height={height} style={{width:width,height:height,display:\"block\"}}></canvas>\n    );\n  }\n\n  componentDidMount(){\n    this.draw();\n  }\n\n  componentDidUpdate(){\n    this.draw();\n  }\n\n  draw(){\n    let { categoryStructure, /* [{name,children:[...]}] */\n          minY, maxY,\n          width, height,\n          } = this.props;\n    this.draw_memo = this.draw_memo ||{};\n    let memo = this.draw_memo;\n    // Cache categoryStructure change\n    if (memo.categoryStructure!==categoryStructure) {\n      memo.categoryStructure = categoryStructure;\n      memo.categoryStructureClone = [];\n      for (let i=0; i<categoryStructure.length; i++){\n        let p = categoryStructure[i];\n        let newP = new PrimaryCategoryObject({...p,backgroundColor:PRIMARY_COLOR_CYCLE[i%PRIMARY_COLOR_CYCLE.length]});\n        newP.start = p.start;\n        newP.end = p.end;\n        newP.children = [];\n        for (let j=0; j<p.children.length; j++) {\n          let s = p.children[j];\n          let newS = new SecondaryCategoryObject({...s,backgroundColor:SECONDARY_COLOR_CYCLE[j%SECONDARY_COLOR_CYCLE.length]});\n          newS.start = s.start;\n          newS.end = s.end;\n          newP.children.push(newS);\n        }\n        memo.categoryStructureClone.push(newP);\n      }\n    }\n    // Draw\n    let canvas = this.ref.current;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0,0,width,height);\n    for (let p of memo.categoryStructureClone) {\n      for (let s of p.children) {\n        if (s.end<minY || s.start>maxY) {\n          continue;\n        }\n        else {\n          let startDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,s.end) );\n          let endDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,s.start) );\n          s.draw(ctx,width,height,startDomX,endDomX);\n        }\n      }\n      //\n      if (p.end<minY || p.start>maxY) {\n        continue;\n      }\n      else {\n        let startDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,p.end) );\n        let endDomX = Math.round( toDomYCoord_Linear(height,minY,maxY,p.start) );\n        console.log(minY,maxY,p.end,startDomX);\n        p.draw(ctx,width,height,startDomX,endDomX);\n      }\n    }\n  }\n}\n\nLinearSpaceYPanel.propTypes = {\n  categoryStructure: PropTypes.array.isRequired,\n  minY: PropTypes.number.isRequired,\n  maxY: PropTypes.number.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n}\n\nexport default LinearSpaceYPanel;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter as Router, Link, Route} from \"react-router-dom\";\n\nimport {LinearSpaceYPanel,CollapsibleYPanel} from \"./lib\";\n\n// CSS\nimport \"./index.css\";\n\nfunction getRandomElements(array){\n  let ret = [];\n  for (let elem of array){\n    if (Math.random()<0.5) {\n      ret.push(elem);\n    }\n  }\n  return ret;\n}\n\nclass CollapsibleYPanelBundle extends Component{\n  constructor(props){\n    super(props);\n    this.categoryStructure = [{ name:'a',\n                                children:[{name:'a1'},\n                                          {name:'a2'}]\n                                },\n                              { name:'b',\n                                children:[{name:'b1'},\n                                          {name:'b2'}]\n                                }\n                              ];\n    this.leaves = this.categoryStructure.map( ({children})=>children )\n                                        .flat()\n                                        .map( ({name})=>name );\n    this.state ={ useLeaves: this.leaves,\n                  rowHeight: 40,\n                  width: 150,\n                  height: 40,\n                  };\n  }\n\n  render(){\n    let {useLeaves,rowHeight,width,height} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            cateogoryStructure\n            <pre>\n              {JSON.stringify(this.categoryStructure,null,' ')}\n            </pre>\n          </div>\n          <div>\n            useLeaves\n            <button onClick={()=>this.setState({useLeaves:getRandomElements(this.leaves)})}>randomize</button>\n            {JSON.stringify(useLeaves,null,' ')}\n          </div>\n          <div>\n            rowHeight\n            <input  type=\"range\" min={10} max={50} value={rowHeight}\n                    onChange={(ev)=>this.setState({rowHeight:Number.parseInt(ev.target.value)})}\n                    />\n            {rowHeight}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={50} max={200} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={0} max={500} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <CollapsibleYPanel  categoryStructure={this.categoryStructure}\n                              useLeaves={useLeaves}\n                              rowHeight={rowHeight}\n                              width={width}\n                              height={height}\n                              />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass LinearSpaceYPanelBundle extends Component {\n  constructor(props){\n    super(props);\n    this.categoryStructure = [{ name:'a',\n                                start:0,\n                                end:15,\n                                children:[{ name:'a1',\n                                            start:0,\n                                            end:5},\n                                          { name:'a2',\n                                            start:5,\n                                            end:15}]\n                                },\n                              { name:'b',\n                                start:15,\n                                end:80,\n                                children:[{ name:'b1',\n                                            start:15,\n                                            end:35},\n                                          { name:'b2',\n                                            start:35,\n                                            end:80}]\n                                }\n                              ];\n    this.state ={ minY: 0,\n                  maxY: 100,\n                  width: 150,\n                  height: 40,\n                  };\n  }\n\n  render(){\n    let {minY,maxY,width,height} = this.state;\n    return (\n      <>\n        <fieldset>\n          <legend>Props</legend>\n          <div>\n            cateogoryStructure\n            <pre>\n              {JSON.stringify(this.categoryStructure,null,' ')}\n            </pre>\n          </div>\n          <div>\n            minY\n            <input  type=\"range\" min={0} max={maxY} value={minY}\n                    onChange={(ev)=>this.setState({minY:Number.parseInt(ev.target.value)})}\n                    />\n            {minY}\n          </div>\n          <div>\n            maxY\n            <input  type=\"range\" min={minY} max={120} value={maxY}\n                    onChange={(ev)=>this.setState({maxY:Number.parseInt(ev.target.value)})}\n                    />\n            {maxY}\n          </div>\n          <div>\n            width\n            <input  type=\"range\" min={50} max={200} value={width}\n                    onChange={(ev)=>this.setState({width:Number.parseInt(ev.target.value)})}\n                    />\n            {width}\n          </div>\n          <div>\n            height\n            <input  type=\"range\" min={0} max={500} value={height}\n                    onChange={(ev)=>this.setState({height:Number.parseInt(ev.target.value)})}\n                    />\n            {height}\n          </div>\n        </fieldset>\n        <fieldset>\n          <legend>Result</legend>\n          <LinearSpaceYPanel  categoryStructure={this.categoryStructure}\n                              minY={minY}\n                              maxY={maxY}\n                              width={width}\n                              height={height}\n                              />\n        </fieldset>\n      </>\n    );\n  }\n}\n\nclass App extends Component{\n  render(){\n    return (\n      <Router>\n        <nav className=\"app\">\n          <Link to=\"/CollapsibleYPanel\">CollapsibleYPanel</Link>\n          <Link to=\"/LinearSpaceYPanel\">LinearSpaceYPanel</Link>\n        </nav>\n        <Route path=\"/CollapsibleYPanel\" exact component={CollapsibleYPanelBundle}/>\n        <Route path=\"/LinearSpaceYPanel\" exact component={LinearSpaceYPanelBundle}/>\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}